import telebot
from telebot import types
from telebot.types import LabeledPrice, ShippingOption
import mysql.connector
from telebot.types import InputMediaPhoto, ReplyKeyboardRemove
import os
from dotenv import load_dotenv
import re
import datetime

dotenv_path = os.path.join(os.path.dirname(__file__), '.env')
if os.path.exists(dotenv_path):
    load_dotenv(dotenv_path)

API_KEY = os.environ.get('API_KEY')
DB_PASS = os.environ.get('DB_PASS')
ADMN_PASS = os.environ.get('ADMN_PASS')
PROVIDER_TOKEN = os.environ.get('PROVIDER_TOKEN')

bot = telebot.TeleBot(API_KEY)
provider_token = PROVIDER_TOKEN

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥
db = mysql.connector.connect(
    host="localhost",
    user="root",
    password=DB_PASS,
    database="flowers",
)
cursor = db.cursor(buffered=True)


class User:
    def __init__(self, Id, first, username):
        self.Id = Id
        self.first = first
        self.username = username


class Flower:
    def __init__(self, Id, name, amount, price):
        self.Id = Id
        self.name = name
        self.amount = amount
        self.price = price

    def display(self):
        print(
            f'Id = {self.Id}, name = {self.name}, amount = {self.amount}, price = {self.price}')


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ø–∏—Å–∫–∞ —Ü–≤–µ—Ç–æ–≤ –∏–∑ –≤—ã–±—Ä–∞–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
flowerDictData = {}

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ø–∏—Å–∫–∞ —Ü–≤–µ—Ç–æ–≤
flowerList = []

# –î–ª—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
msgId = 0
allPrice = 0

# –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
location = 0


# –†–µ–∞–∫—Ü–∏—è –Ω–∞ /start
@bot.message_handler(commands=['start'])
def start_message(message):
    cid = message.chat.id

    user = User(Id=cid, first=message.from_user.first_name,
                username=message.from_user.username)

    request = f'INSERT INTO customers(name, user_name, chat_id) SELECT * FROM(SELECT \'{user.first}\', \'{user.username}\', \'{user.Id}\') AS tmp WHERE NOT EXISTS(SELECT chat_id FROM customers WHERE chat_id=\'{user.Id}\') LIMIT 1'

    try:
        cursor.execute(request)
        db.commit()
    except:
        db.rollback()

    keyboard = types.ReplyKeyboardMarkup(1, row_width=2, selective=0)
    keyboard.add(*[types.KeyboardButton(text=name)
                   for name in ['–ú–µ–Ω—éüìã', '–ö–æ—Ä–∑–∏–Ω–∞üõçÔ∏è']])
    bot.send_photo(
        cid, open('images/hello.jpg', 'rb'), caption=f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first}\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Ü–≤–µ—Ç–æ—á–Ω—ã–π –º–∞–≥–∞–∑–∏–Ωüíê', reply_markup=keyboard)


def mainMenu(message):
    cid = message.chat.id

    cursor.execute('SELECT COUNT(*) FROM category')
    N = cursor.fetchone()
    N = int(str(N)[1:-2])

    cursor.execute('SELECT name FROM category')

    flowerList = []
    for i in range(N):
        flowerList.append(str(cursor.fetchone())[2:-3])

    keyboard = types.ReplyKeyboardMarkup(1, row_width=2, selective=0)
    keyboard.add('‚óÄÔ∏è–ù–∞–∑–∞–¥', '–ö–æ—Ä–∑–∏–Ω–∞üõçÔ∏è')
    keyboard.add(*[types.KeyboardButton(text=name)
                   for name in flowerList])

    msg = bot.send_message(cid, '–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ', reply_markup=keyboard)
    bot.register_next_step_handler(msg, selectCategory)


def selectCategory(message):
    cid = message.chat.id

    if message.text == '‚óÄÔ∏è–ù–∞–∑–∞–¥':
        start_message(message)

    elif message.text == '–ö–æ—Ä–∑–∏–Ω–∞üõçÔ∏è':
        cart(message)

    elif message.text == '/start':
        bot.clear_step_handler_by_chat_id(cid)
        start_message(message)

    elif message.text == '/admin':
        bot.clear_step_handler_by_chat_id(cid)
        admin_message(message)

    elif message.text == '/help':
        bot.clear_step_handler_by_chat_id(cid)
        help_message(message)

    else:
        cursor.execute(
            f'SELECT id FROM category WHERE name=\'{message.text}\'')
        categoryId = str(cursor.fetchone())
        print('categoryId = ' + str(categoryId))

        if categoryId == 'None':
            msg = bot.send_message(cid, '–¢–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç :(')
            bot.register_next_step_handler(msg, selectCategory)

        else:
            categoryId = int(str(categoryId)[1:-2])

            cursor.execute(
                f'SELECT COUNT(*) FROM goods WHERE category=\'{categoryId}\'')
            N = cursor.fetchone()
            N = int(str(N)[1:-2])
            print('N = ' + str(N))

            if N != 0:
                cursor.execute(
                    f'SELECT id FROM goods WHERE category=\'{categoryId}\'')
                flowerId = []
                for i in range(N):
                    flowerId.append(str(cursor.fetchone())[1:-2])

                for i in flowerId:
                    keyboard = types.InlineKeyboardMarkup()
                    keyboard.add(*[types.InlineKeyboardButton(text=name, callback_data=name + ':' + str(i))  # –ï—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ —Ç—É—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞
                                   for name in ['‚òùÔ∏è–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—Éüëà']])

                    cursor.execute(f'SELECT name FROM goods WHERE id=\'{i}\'')
                    name = str(cursor.fetchone())[2:-3]

                    cursor.execute(f'SELECT price FROM goods WHERE id=\'{i}\'')
                    price = str(cursor.fetchone())[1:-2]

                    cursor.execute(
                        f'SELECT amount FROM goods WHERE id=\'{i}\'')
                    amount = str(cursor.fetchone())[1:-2]

                    msg = bot.send_photo(
                        cid, open(f'images/{i}.jpg', 'rb'), caption=name +
                        '\n–í –Ω–∞–ª–∏—á–∏–µ - ' + amount + ' —à—Ç' +
                        '\n1Ô∏è‚É£ —à—Ç - ' + price + ' –≥—Ä–Ωüí∏', reply_markup=keyboard)

                bot.register_next_step_handler(msg, selectCategory)

            else:
                msg = bot.send_message(cid, '–°–µ–π—á–∞—Å –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏ :(')
                bot.register_next_step_handler(msg, selectCategory)


# –ö–æ—Ä–∑–∏–Ω–∞
def cart(message):
    cid = message.chat.id
    global msgId
    allPrice = 0

    cursor.execute(
        f'SELECT id FROM customers WHERE chat_id = {cid}')
    custId = str(cursor.fetchone())[1:-2]

    cursor.execute(
        f'SELECT id FROM orders WHERE id_cust = {custId} AND complit = \'0\'')
    ordersId = cursor.fetchone()

    if ordersId == None:
        keyboard = types.ReplyKeyboardMarkup(1, row_width=2, selective=0)
        keyboard.add(*[types.KeyboardButton(text=name) for name in ['–ú–µ–Ω—éüìã']])
        bot.send_message(cid, '–í –∫–æ—Ä–∑–∏–Ω–µüõçÔ∏è —Å–µ–π—á–∞—Å –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.',
                         reply_markup=keyboard)

    # –°–¥–µ–ª–∞—Ç—å —Ç–∞–∫ —á—Ç–æ –±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∞—Å—å –∫—É–ø–ª–µ–Ω–∞—è –∫–æ—Ä–∑–∏–Ω–∞
    else:
        ordersId = int(str(ordersId)[1:-2])
        print('ordersId = ' + str(ordersId))

        cursor.execute(
            f'SELECT COUNT(*) FROM basket WHERE id_orders = {ordersId}')
        N = int(str(cursor.fetchone())[1:-2])
        print('N = ' + str(N))

        if N > 0:
            keyboard = types.ReplyKeyboardMarkup(1, row_width=2, selective=0)
            keyboard.add(*[types.KeyboardButton(text=name)
                           for name in ['–ú–µ–Ω—éüìã', '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑üì¶']])
            bot.send_message(
                cid, '–í –∫–æ—Ä–∑–∏–Ω–µüõçÔ∏è —Å–µ–π—á–∞—Å —Ç–∞–∫–∏–µ —Ç–æ–≤–∞—Ä—ã:', reply_markup=keyboard)

            cart = {}
            cursor.execute(
                f'SELECT id_goods, amount, full_price FROM basket WHERE id_orders = \'{ordersId}\'')

            for i in range(N):
                cart.update({i: cursor.fetchone()})
                print('cart = ' + str(cart))

            for i in range(N):
                flowerId = int(cart[i][0])
                amount = int(cart[i][1])
                fullPrice = int(cart[i][2])

                cursor.execute(
                    f'SELECT name, price FROM goods WHERE id=\'{flowerId}\'')
                a = str(cursor.fetchone())
                name = str(a.split(', ')[0])[2:-1]
                price = str(a.split(', ')[1])[:-1]

                keyboard = types.InlineKeyboardMarkup()
                keyboard.add(*[types.InlineKeyboardButton(text=name, callback_data=name + ':' + str(flowerId))
                               for name in ['-', f'{amount} —à—Ç.', '+', '‚ùå', f'–ö –æ–ø–ª–∞—Ç–µ - {fullPrice} –≥—Ä–Ωüí∏']])
                msg = bot.send_photo(
                    cid, open(f'images/{flowerId}.jpg', 'rb'), caption=name +
                    '\n1Ô∏è‚É£ —à—Ç - ' + price + ' –≥—Ä–Ωüí∏', reply_markup=keyboard)

                allPrice += int(fullPrice)

            msgId = bot.send_message(
                cid, f'üí∏–í—Å–µ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ - {allPrice}  –≥—Ä–Ωüí∏').message_id

            bot.register_next_step_handler(msg, phoheNumber, cart)

        else:
            keyboard = types.ReplyKeyboardMarkup(1, row_width=2, selective=0)
            keyboard.add(*[types.KeyboardButton(text=name)
                           for name in ['–ú–µ–Ω—éüìã']])
            bot.send_message(
                cid, '–í –∫–æ—Ä–∑–∏–Ω–µüõçÔ∏è —Å–µ–π—á–∞—Å –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.', reply_markup=keyboard)


def phoheNumber(message, cart):
    cid = message.chat.id

    if message.text == '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑üì¶':
        cursor.execute(f'SELECT phone FROM customers WHERE chat_id = {cid}')
        phone = str(cursor.fetchone())[1:-2]
        print(phone)

        if phone != 'None':
            bot.send_message(message.chat.id, '–ú—ã –≤–∞—Å –ø–æ–º–Ω–∏–º :)')

            keyboard = types.ReplyKeyboardMarkup(1, row_width=2, selective=0)
            reg_button = types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é",
                                              request_location=True)
            keyboard.add('–û—Ç–º–µ–Ω–∏—Ç—å‚ùå', reg_button)

            msg = bot.send_message(message.chat.id,
                                   '–£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ –¥–æ—Å—Ç–∞–≤–∫–∏: ',
                                   reply_markup=keyboard)

            bot.register_next_step_handler(msg, buyCart, cart)

        else:
            keyboard = types.ReplyKeyboardMarkup(1, row_width=2, selective=0)
            reg_button = types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞üì≤",
                                              request_contact=True,)
            keyboard.add('–û—Ç–º–µ–Ω–∏—Ç—å‚ùå', reg_button)
            msg = bot.send_message(message.chat.id,
                                   '–û—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —á—Ç–æ–±—ã –º—ã —Å–º–æ–≥–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏: ',
                                   reply_markup=keyboard)
            bot.register_next_step_handler(msg, delivery, cart)

    elif message.text == '–ú–µ–Ω—éüìã':
        mainMenu(message)

    else:
        bot.send_message(cid, '–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç')
        bot.clear_step_handler_by_chat_id(cid)
        cart(message)


def delivery(message, cart):
    cid = message.chat.id

    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å‚ùå':
        bot.clear_step_handler_by_chat_id(cid)
        start_message(message)

    else:
        nomer = message.contact.phone_number
        try:
            cursor.execute(
                f'UPDATE customers SET phone = {nomer} WHERE chat_id = {cid}')
            db.commit()
        except Exception as e:
            db.rollback()
            print(e)

        # –û–ø–∏—Å–∞—Ç—å –≤ –¥–æ–∫–µ –ø—Ä–æ –∫–Ω–æ–ø–∫—É
        keyboard = types.ReplyKeyboardMarkup(1, row_width=2, selective=0)
        reg_button = types.KeyboardButton(
            text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é", request_location=True)
        keyboard.add('–û—Ç–º–µ–Ω–∏—Ç—å‚ùå', reg_button)
        msg = bot.send_message(message.chat.id,
                               '–£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ –¥–æ—Å—Ç–∞–≤–∫–∏: ',
                               reply_markup=keyboard)

        bot.register_next_step_handler(msg, buyCart, cart)


def buyCart(message, cart):
    cid = message.chat.id
    mid = message.message_id

    global allPrice
    allPrice = 0
    d = {}
    desc = ''
    global location
    location = 0

    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å‚ùå':
        bot.clear_step_handler_by_chat_id(cid)
        start_message(message)

    else:
        # –≤—ã–Ω–µ—Å—Ç–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
        location = f'{message.location.latitude},{message.location.longitude}'
        print(location)

        for i in range(len(cart)):
            flowerId = int(cart[i][0])

            cursor.execute(
                f'SELECT name FROM goods WHERE id=\'{flowerId}\'')
            name = str(cursor.fetchone())[2:-3]

            cursor.execute(
                f'SELECT amount FROM basket WHERE id_goods=\'{flowerId}\'')
            amount = str(cursor.fetchone())[1:-2]

            d.update({f'{name}': f'{amount}'})
        print(d)

        for i in d:
            desc += f'{i} - {d.get(i)} —à—Ç\n'
        print(desc)

        cursor.execute(
            f'SELECT id FROM customers WHERE chat_id = {cid}')
        custId = int(str(cursor.fetchone())[1:-2])

        cursor.execute(
            f'SELECT id FROM orders WHERE id_cust = \'{custId}\' AND complit = \'0\'')
        ordersId = int(str(cursor.fetchone())[1:-2])

        cursor.execute(
            f'SELECT full_price FROM basket WHERE id_orders = \'{ordersId}\'')
        for i in range(len(cart)):
            fullPrice = int(str(cursor.fetchone())[1:-2])
            allPrice += fullPrice

        prices = [LabeledPrice(label=f'{desc}', amount=f'{allPrice}00')]

        keyboard = types.ReplyKeyboardMarkup(1, row_width=2, selective=0)
        keyboard.add(*[types.KeyboardButton(text=text)
                       for text in ['–ú–µ–Ω—éüìã']])
        bot.send_message(cid, '–í–∞—à –∑–∞–∫–∞–∑ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω:', reply_markup=keyboard)

        cursor.execute(
            f'SELECT id FROM customers WHERE chat_id = {cid}')
        custId = int(str(cursor.fetchone())[1:-2])

        cursor.execute(
            f'SELECT id FROM orders WHERE id_cust = \'{custId}\' AND complit = \'0\'')
        ordersId = int(str(cursor.fetchone())[1:-2])

        bot.send_invoice(message.chat.id, title=f'üì¶–ó–∞–∫–∞–∑ ‚Ññ{ordersId}',
                         description='–í—Å–µ —Ü–≤–µ—Ç—ã –≤—ã—Ä–æ—â–µ–Ω—ã –≤ –Ω–∞—à–∏—Ö —Ç–µ–ø–ª–∏—Ü–∞—Ö –∏ –æ–±–ª–∞–¥–∞—é—Ç –≤—ã—Ä–∞–∂–µ–Ω–∏–º –∞—Ä–æ–º–∞—Ç–æ–ºüå∏üëÉüòã',
                         provider_token=provider_token,
                         currency='uah',
                         is_flexible=False,  # True If you need to set up Shipping Fee
                         prices=prices,
                         start_parameter='Flowers',
                         invoice_payload='Flower Store')


# –ö—Ç–æ-—Ç–æ –ø–æ–ø—ã—Ç–∞–ª—Å—è —É–∫—Ä–∞—Å—Ç—å CVV –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã...
@bot.pre_checkout_query_handler(func=lambda query: True)
def checkout(pre_checkout_query):
    bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True,
                                  error_message="–ö—Ç–æ-—Ç–æ –ø–æ–ø—ã—Ç–∞–ª—Å—è —É–∫—Ä–∞—Å—Ç—å CVV –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã, –Ω–æ –º—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—â–∏—Ç–∏–ª–∏ –≤–∞—à–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ,"
                                                " –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç, –Ω–∞–º –Ω—É–∂–µ–Ω –Ω–µ–±–æ–ª—å—à–æ–π –æ—Ç–¥—ã—Ö.")


# –†–µ–∞–∫—Ü–∏—è –Ω–∞ —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
@bot.message_handler(content_types=['successful_payment'])
def got_payment(message):
    cid = message.chat.id
    now = datetime.datetime.now()

    cursor.execute(
        f'SELECT id FROM customers WHERE chat_id = {cid}')
    custId = int(str(cursor.fetchone())[1:-2])

    cursor.execute(
        f'SELECT id FROM orders WHERE id_cust = \'{custId}\' AND complit = \'0\'')
    ordersId = int(str(cursor.fetchone())[1:-2])

    # –í–Ω–µ—Å–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    try:
        cursor.execute(
            f'UPDATE orders SET allprice = \'{allPrice}\', time = \'{now}\', address = \'{location}\', complit = \'1\' WHERE id_cust = {custId} AND complit = \'0\'')
        db.commit()
    except Exception as e:
        db.rollback()
        print(e)

    bot.send_message(message.chat.id,
                     f'üì¶–ó–∞–∫–∞–∑ ‚Ññ{ordersId} –æ–ø–ª–∞—á–µ–Ω‚ò∫Ô∏èüëç\n' +
                     '\n–û–Ω –±—É–¥–µ—Ç —É –≤–∞—Å –≤ –±–ª–∏–∂–∞–π—â–µ–µ –≤—Ä–µ–º—è‚åöÔ∏è. –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help\n' +
                     '\nüòã–•–æ—Ä–æ—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫üòã')


# –†–µ–∞–∫—Ü–∏—è –Ω–∞ /admin
@ bot.message_handler(commands=['admin'])
def admin_message(message):
    cid = message.chat.id

    msg = bot.send_message(cid, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ')
    bot.register_next_step_handler(msg, confirmPassword)


def confirmPassword(message):
    cid = message.chat.id

    if message.text == ADMN_PASS:

        keyboard = types.ReplyKeyboardMarkup(1, row_width=2, selective=0)
        keyboard.add(*[types.KeyboardButton(text=admbutton)
                       for admbutton in ['–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä', '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', '–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', '–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á—ë—Ç']])
        keyboard.add('–í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏')

        msg = bot.send_message(
            cid, '–†–µ–∫–æ–º–µ–Ω–¥—É—é —É–¥–∞–ª–∏—Ç—å –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º. –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?', reply_markup=keyboard)
        bot.register_next_step_handler(msg, adminArea)

    elif message.text == '/start':
        bot.clear_step_handler_by_chat_id(cid)
        start_message(message)
    else:
        bot.send_message(cid, '–ü–∞—Ä–æ–ª—å –Ω–µ –≤–µ—Ä–Ω—ã–π :(')


# –§—É–Ω–∫—Ü–∏–∏ –∞–¥–º–∏–Ω–∞
def adminArea(message):
    cid = message.chat.id
    global flowerList
    flowerList = []

    if message.text == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä':

        cursor.execute('SELECT COUNT(*) FROM category')
        N = cursor.fetchone()
        N = int(str(N)[1:-2])

        cursor.execute('SELECT name FROM category ORDER BY name')
        for i in range(N):
            flowerList.append(str(cursor.fetchone())[2:-3])

        keyboard = types.ReplyKeyboardMarkup(1, row_width=1, selective=0)
        keyboard.add('–ù–∞–∑–∞–¥‚óÄÔ∏è')
        keyboard.add(*[types.KeyboardButton(text=name)
                       for name in flowerList])
        print('flowerList = ' + str(flowerList))

        msg = bot.send_message(cid, '–í—ã–±–µ—Ä–µ—Ç–µ –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ',
                               reply_markup=keyboard)
        bot.register_next_step_handler(msg, adminSelectCategoryForEdit)

    elif message.text == '–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é':

        cursor.execute('SELECT COUNT(*) FROM category')
        N = cursor.fetchone()
        N = int(str(N)[1:-2])

        cursor.execute('SELECT name FROM category')
        flowerStr = ''
        for i in range(N):
            flowerStr += str(cursor.fetchone())[2:-3] + '\n'

        bot.send_message(cid, '–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ' +
                         '\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n' + flowerStr)

        keyboard = types.ReplyKeyboardMarkup(1, row_width=1, selective=0)
        keyboard.add('‚óÄÔ∏è–ù–∞–∑–∞–¥')
        msg = bot.send_message(
            cid, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ', reply_markup=keyboard)
        bot.register_next_step_handler(msg, adminAddCategory)

    elif message.text == '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä':

        cursor.execute('SELECT COUNT(*) FROM category')
        N = cursor.fetchone()
        N = int(str(N)[1:-2])

        cursor.execute('SELECT name FROM category ORDER BY name')
        flowerList = []
        for i in range(N):
            flowerList.append(str(cursor.fetchone())[2:-3])
        print('flowerList = ' + str(flowerList))

        keyboard = types.ReplyKeyboardMarkup(1, row_width=1, selective=0)
        keyboard.add('‚óÄÔ∏è–ù–∞–∑–∞–¥')
        keyboard.add(*[types.KeyboardButton(text=name)
                       for name in flowerList])

        msg = bot.send_message(cid, '–í—ã–±–µ—Ä–µ—Ç–µ –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:',
                               reply_markup=keyboard)
        bot.register_next_step_handler(msg, adminSelectCategory)

    elif message.text == '–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á—ë—Ç':
        keyboard = types.ReplyKeyboardMarkup(1, row_width=2, selective=0)
        keyboard.add(*[types.KeyboardButton(text=admbutton)
                       for admbutton in ['–ó–∞ –¥–µ–Ω—å', '–ó–∞ –º–µ—Å—è—Ü', '–ü–æ –∫–ª–∏–µ–Ω—Ç–∞–º', '–ü–æ —Ç–æ–≤–∞—Ä–∞–º']])
        msg = bot.send_message(
            cid, '–í—ã–±–µ—Ä–µ—Ç–µ –Ω—É–∂–Ω—ã–π –æ—Ç—á—ë—Ç', reply_markup=keyboard)
        bot.register_next_step_handler(msg, chooseReport)

    elif message.text == '–í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏':
        bot.send_message(cid, '–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏' +
                         '\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n', reply_markup=ReplyKeyboardRemove())
        start_message(message)

    elif message.text == '/start':
        bot.clear_step_handler_by_chat_id(cid)
        start_message(message)

    else:
        bot.send_message(cid, '–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç')


# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
def adminSelectCategoryForEdit(message):
    cid = message.chat.id

    if message.text != '‚óÄÔ∏è–ù–∞–∑–∞–¥':

        global flowerDictData
        category = message.text

        try:
            cursor.execute(
                f'SELECT id FROM category WHERE name=\'{category}\'')
            categoryId = int(str(cursor.fetchone())[1:-2])
            print('categoryId = ' + str(categoryId))

            cursor.execute(
                f'SELECT COUNT(*) FROM goods WHERE category=\'{categoryId}\'')
            N = int(str(cursor.fetchone())[1:-2])
            print('N = ' + str(N))

        except:
            msg = bot.send_message(
                cid, '–°–µ–π—á–∞—Å –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏ :(\n–í—ã–±–µ—Ä–µ—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ')
            bot.register_next_step_handler(msg, adminSelectCategoryForEdit)

        if N != 0:
            cursor.execute(
                f'SELECT id, name, price, amount FROM goods WHERE category=\'{categoryId}\' ORDER BY name')
            flowerDictData = {}
            for i in range(N):
                flowerDictData.update({i: cursor.fetchone()})

                flowerId = str(flowerDictData[i][0])
                name = str(flowerDictData[i][1])
                amount = str(flowerDictData[i][2])
                price = str(flowerDictData[i][3])

                flowerDictData = flowerDictData.copy()
                print('GLOBAL flowerDictData = ' + str(flowerDictData))

                keyboard = types.InlineKeyboardMarkup(row_width=2)
                keyboard.add(*[types.InlineKeyboardButton(text=name, callback_data=name + ':' + flowerId)
                               for name in ['–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—É', '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä']])
                msg = bot.send_photo(
                    cid, open(f'images/{flowerId}.jpg', 'rb'), caption=name +
                    '\n–í –Ω–∞–ª–∏—á–∏–µ - ' + amount + ' —à—Ç' +
                    '\n1Ô∏è‚É£ —à—Ç - ' + price + ' –≥—Ä–Ωüí∏', reply_markup=keyboard)

            bot.register_next_step_handler(msg, adminSelectCategoryForEdit)

        else:
            msg = bot.send_message(
                cid, '–°–µ–π—á–∞—Å –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏ :(\n–í—ã–±–µ—Ä–µ—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ')
            bot.register_next_step_handler(msg, adminSelectCategoryForEdit)

    else:
        keyboard = types.ReplyKeyboardMarkup(1, row_width=2, selective=0)
        keyboard.add(*[types.KeyboardButton(text=admbutton)
                       for admbutton in ['–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä', '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', '–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', '–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á—ë—Ç']])
        keyboard.add('–í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏')

        msg = bot.send_message(cid, '–û–∫–µ–π', reply_markup=keyboard)
        bot.register_next_step_handler(msg, adminArea)


# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã
def adminEditPrice(message, flowerId):
    cid = message.chat.id
    print(message.text)

    keyboard = types.ReplyKeyboardMarkup(1, row_width=1, selective=0)
    keyboard.add('‚óÄÔ∏è–ù–∞–∑–∞–¥')
    keyboard.add(*[types.KeyboardButton(text=name)
                   for name in flowerList])

    if message.text != '‚óÄÔ∏è–ù–∞–∑–∞–¥':
        if message.text.isdigit():
            try:
                cursor.execute(
                    f'UPDATE goods SET price = \'{message.text}\' WHERE id = \'{flowerId}\'')
                db.commit()
            except:
                db.rollback()
        else:
            msg = bot.send_message(cid, '–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
            bot.register_next_step_handler(msg, adminEditPrice, flowerId)

        bot.send_message(cid, f'–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤–Ω–µ—Å–µ–Ω—ã ({message.text})')
        msg = bot.send_message(
            cid, '–ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=keyboard)
        bot.register_next_step_handler(msg, adminSelectCategoryForEdit)

    else:
        bot.send_message(cid, '–û–∫–µ–π')
        msg = bot.send_message(
            cid, '–ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=keyboard)
        bot.register_next_step_handler(msg, adminSelectCategoryForEdit)


# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
def adminEditAmount(message, flowerId):
    cid = message.chat.id
    print(message.text)

    keyboard = types.ReplyKeyboardMarkup(1, row_width=1, selective=0)
    keyboard.add('‚óÄÔ∏è–ù–∞–∑–∞–¥')
    keyboard.add(*[types.KeyboardButton(text=name)
                   for name in flowerList])

    if message.text != '‚óÄÔ∏è–ù–∞–∑–∞–¥':
        if message.text.isdigit():
            try:
                cursor.execute(
                    f'UPDATE goods SET amount = \'{message.text}\' WHERE id = \'{flowerId}\'')
                db.commit()
            except:
                db.rollback()
        else:
            msg = bot.send_message(cid, '–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
            bot.register_next_step_handler(msg, adminEditPrice, flowerId)

        bot.send_message(cid, f'–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤–Ω–µ—Å–µ–Ω—ã ({message.text})')
        msg = bot.send_message(
            cid, '–ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=keyboard)
        bot.register_next_step_handler(msg, adminSelectCategoryForEdit)

    else:
        bot.send_message(cid, '–û–∫–µ–π')
        msg = bot.send_message(
            cid, '–ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=keyboard)
        bot.register_next_step_handler(msg, adminSelectCategoryForEdit)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
def adminAddCategory(message):
    cid = message.chat.id

    if message.text != '‚óÄÔ∏è–ù–∞–∑–∞–¥':
        category = message.text
        request = f'INSERT INTO category(name) SELECT * FROM(SELECT \'{category}\') AS tmp WHERE NOT EXISTS(SELECT name FROM category WHERE name = \'{category}\') LIMIT 1'

        try:
            cursor.execute(request)
            db.commit()
        except:
            db.rollback()

        keyboard = types.ReplyKeyboardMarkup(1, row_width=2, selective=0)
        keyboard.add(*[types.KeyboardButton(text=admbutton)
                       for admbutton in ['–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä', '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', '–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', '–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á—ë—Ç']])
        keyboard.add('–í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏')

        msg = bot.send_message(
            cid, '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞', reply_markup=keyboard)
        bot.register_next_step_handler(msg, adminArea)

    else:
        keyboard = types.ReplyKeyboardMarkup(1, row_width=2, selective=0)
        keyboard.add(*[types.KeyboardButton(text=admbutton)
                       for admbutton in ['–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä', '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', '–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', '–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á—ë—Ç']])
        keyboard.add('–í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏')
        msg = bot.send_message(cid, '–û–∫–µ–π', reply_markup=keyboard)
        bot.register_next_step_handler(msg, adminArea)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
def adminSelectCategory(message):
    cid = message.chat.id

    if message.text != '‚óÄÔ∏è–ù–∞–∑–∞–¥':
        category = message.text

        cursor.execute(f'SELECT id FROM category WHERE name=\'{category}\'')
        categoryId = int(str(cursor.fetchone())[1:-2])
        print(categoryId)

        keyboard = types.ReplyKeyboardMarkup(1, 1)
        keyboard.add('–û—Ç–º–µ–Ω–∏—Ç—å‚ùå')

        msg = bot.send_message(
            cid, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞: ', reply_markup=keyboard)
        bot.register_next_step_handler(msg, adminAddPosition, categoryId)

    else:
        keyboard = types.ReplyKeyboardMarkup(1, row_width=2, selective=0)
        keyboard.add(*[types.KeyboardButton(text=admbutton)
                       for admbutton in ['–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä', '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', '–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', '–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á—ë—Ç']])
        keyboard.add('–í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏')
        msg = bot.send_message(cid, '–û–∫–µ–π', reply_markup=keyboard)
        bot.register_next_step_handler(msg, adminArea)


def adminAddPosition(message, categoryId):
    cid = message.chat.id
    newFlower = message.text

    if message.text != '–û—Ç–º–µ–Ω–∏—Ç—å‚ùå':

        try:
            cursor.execute(
                f'INSERT INTO goods (category, name) VALUES (\'{categoryId}\', \'{newFlower}\')')
            db.commit()
        except:
            db.rollback()

        msg = bot.send_message(cid, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞: ')
        bot.register_next_step_handler(msg, adminAddAmount, newFlower)

    else:
        request = f'DELETE FROM goods WHERE name = \'{newFlower}\''

        try:
            cursor.execute(request)
            db.commit()
        except:
            db.rollback()

        keyboard = types.ReplyKeyboardMarkup(1, row_width=2, selective=0)
        keyboard.add(*[types.KeyboardButton(text=admbutton)
                       for admbutton in ['–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä', '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', '–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', '–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á—ë—Ç']])
        keyboard.add('–í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏')
        msg = bot.send_message(cid, '–û–∫–µ–π', reply_markup=keyboard)
        bot.register_next_step_handler(msg, adminArea)


def adminAddAmount(message, newFlower):
    cid = message.chat.id

    if message.text != '–û—Ç–º–µ–Ω–∏—Ç—å‚ùå':
        newFlower = newFlower
        amount = message.text

        request = f'UPDATE goods SET amount = \'{amount}\'WHERE name = \'{newFlower}\''

        try:
            cursor.execute(request)
            db.commit()
        except:
            db.rollback()

        msg = bot.send_message(cid, '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ü–≤–µ—Ç–∫–∞: ')
        bot.register_next_step_handler(msg, adminAddPosPrice, newFlower)
    else:
        request = f'DELETE FROM goods WHERE name = \'{newFlower}\''

        try:
            cursor.execute(request)
            db.commit()
        except:
            db.rollback()

        keyboard = types.ReplyKeyboardMarkup(1, row_width=2, selective=0)
        keyboard.add(*[types.KeyboardButton(text=admbutton)
                       for admbutton in ['–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä', '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', '–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', '–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á—ë—Ç']])
        keyboard.add('–í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏')
        msg = bot.send_message(cid, '–û–∫–µ–π', reply_markup=keyboard)
        bot.register_next_step_handler(msg, adminArea)


def adminAddPosPrice(message, newFlower):
    cid = message.chat.id

    if message.text != '–û—Ç–º–µ–Ω–∏—Ç—å‚ùå':
        newFlower = newFlower
        newFlowerPrice = message.text

        request = f'UPDATE goods SET price = \'{newFlowerPrice}\'WHERE name = \'{newFlower}\''

        try:
            cursor.execute(request)
            db.commit()
        except:
            db.rollback()

        msg = bot.send_message(cid, '–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ: ')
        bot.register_next_step_handler(msg, adminAddPhoto, newFlower)

    else:
        request = f'DELETE FROM goods WHERE name = \'{newFlower}\''

        try:
            cursor.execute(request)
            db.commit()
        except:
            db.rollback()

        keyboard = types.ReplyKeyboardMarkup(1, row_width=2, selective=0)
        keyboard.add(*[types.KeyboardButton(text=admbutton)
                       for admbutton in ['–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä', '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', '–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', '–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á—ë—Ç']])
        keyboard.add('–í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏')
        msg = bot.send_message(cid, '–û–∫–µ–π', reply_markup=keyboard)
        bot.register_next_step_handler(msg, adminArea)


def adminAddPhoto(message, newFlower):
    cid = message.chat.id

    try:
        if message.text != '–û—Ç–º–µ–Ω–∏—Ç—å‚ùå':
            newFlower = newFlower

            cursor.execute(f'SELECT id FROM goods WHERE name=\'{newFlower}\'')
            flowerID = int(str(cursor.fetchone())[1:-2])
            print(flowerID)

            fileInfo = bot.get_file(message.document.file_id)
            print(fileInfo)
            downloadedFile = bot.download_file(fileInfo.file_path)

            src = 'images/' + str(flowerID) + '.jpg'
            with open(src, 'wb') as new_file:
                new_file.write(downloadedFile)

            keyboard = types.ReplyKeyboardMarkup(1, row_width=2, selective=0)
            keyboard.add(*[types.KeyboardButton(text=admbutton)
                           for admbutton in ['–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä', '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', '–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', '–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á—ë—Ç']])
            keyboard.add('–í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏')

            msg = bot.send_message(
                cid, '–ü–æ–∑–∏—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞', reply_markup=keyboard)
            bot.register_next_step_handler(msg, adminArea)

        else:
            request = f'DELETE FROM goods WHERE name = \'{newFlower}\''

            try:
                cursor.execute(request)
                db.commit()
            except:
                db.rollback()

            keyboard = types.ReplyKeyboardMarkup(1, row_width=2, selective=0)
            keyboard.add(*[types.KeyboardButton(text=admbutton)
                           for admbutton in ['–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä', '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', '–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', '–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á—ë—Ç']])
            keyboard.add('–í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏')

            msg = bot.send_message(cid, '–û–∫–µ–π', reply_markup=keyboard)
            bot.register_next_step_handler(msg, adminArea)

    except Exception as e:
        print(e)
        msg = bot.reply_to(
            message, '–ù–µ —Å–∂–∏–º–∞–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
        bot.register_next_step_handler(msg, adminAddPhoto, newFlower)


# –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
def adminConfirmDel(message, flowerId):
    cid = message.chat.id

    if message.text == '–î–∞':

        os.remove(f'images/{flowerId}.jpg')

        request = f'DELETE FROM goods WHERE id = \'{flowerId}\''

        try:
            cursor.execute(request)
            db.commit()
        except:
            db.rollback()

        keyboard = types.ReplyKeyboardMarkup(1, row_width=1, selective=0)
        keyboard.add('‚óÄÔ∏è–ù–∞–∑–∞–¥')
        keyboard.add(*[types.KeyboardButton(text=name)
                       for name in flowerList])

        msg = bot.send_message(cid, '–ü–æ–∑–∏—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞')
        msg = bot.send_message(
            cid, '–ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=keyboard)
        bot.register_next_step_handler(msg, adminSelectCategoryForEdit)

    else:
        keyboard = types.ReplyKeyboardMarkup(1, row_width=1, selective=0)
        keyboard.add('‚óÄÔ∏è–ù–∞–∑–∞–¥')
        keyboard.add(*[types.KeyboardButton(text=name)
                       for name in flowerList])

        bot.send_message(cid, '–û–∫–µ–π', reply_markup=keyboard)
        msg = bot.send_message(cid, '–ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:')
        bot.register_next_step_handler(msg, adminSelectCategoryForEdit)


# –û—Ç—á—ë—Ç—ã
def chooseReport(message):
    cid = message.chat.id

    if message.text == '–ó–∞ –¥–µ–Ω—å':
        today = str(datetime.datetime.today()).split(' ')[0]
        print(today)

        cursor.execute(
            f'SELECT * FROM orders WHERE time=\'{today}\'')
        forDay = str(cursor.fetchall())
        print('forDay = ' + str(forDay))

        # my_file = open("DayReport.csv", "w+")
        # my_file.write('')
        # my_file.close()

    elif message.text == '–ó–∞ –º–µ—Å—è—Ü':
        pass

    elif message.text == '–ü–æ –∫–ª–∏–µ–Ω—Ç–∞–º':
        pass

    elif message.text == '–ü–æ —Ç–æ–≤–∞—Ä–∞–º':
        pass


# –†–µ–∞–∫—Ü–∏—è –Ω–∞ /help
@ bot.message_handler(commands=['help'])
def help_message(message):
    cid = message.chat.id
    bot.send_message(cid, '–ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–æ–ª–æ–º–∫—É, –ø–∏—à–∏—Ç–µ –µ–º—É - @parubanok')


# –†–µ–∞–∫—Ü–∏—è –Ω–∞ —Ç–µ–∫—Å—Ç
@ bot.message_handler(content_types=['text'])
def send_text(message):
    cid = message.chat.id

    if message.text == '–ú–µ–Ω—éüìã':
        mainMenu(message)

    elif message.text == '–ö–æ—Ä–∑–∏–Ω–∞üõçÔ∏è':
        cart(message)

    elif message.text == '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑üì¶':
        phoheNumber(message, cart)

    else:
        bot.send_message(cid, '–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç')


# –†–µ–∞–∫—Ü–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω–æ–≤—ã–µ –∫–Ω–æ–∫–ø–∏ –º–µ–Ω—é
@ bot.callback_query_handler(func=lambda call: True)
def send_answer(call):
    print('\n' + call.data)

    cid = call.message.chat.id
    mid = call.message.message_id
    global allPrice
    allPrice = 0

    if re.match(r'‚òùÔ∏è–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—Éüëà', call.data):
        bot.answer_callback_query(
            callback_query_id=call.id, text="–î–æ–±–∞–≤–ª–µ–Ω–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É", show_alert=False)

        flowerId = call.data.split(':')[1]

        cursor.execute(
            f'SELECT price FROM goods WHERE id = {flowerId} ')
        price = int(str(cursor.fetchone())[1:-2])

        cursor.execute(
            f'SELECT id FROM customers WHERE chat_id = {cid}')
        custId = int(str(cursor.fetchone())[1:-2])

        # –î–æ–ª–∂–Ω–æ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –¥–æ–±–∞–≤–ª—è—Ç—å 1 –∑–∞–ø–∏—Å—å —Å 1 cust_id /// –î–æ–±–∞–≤–ª—è—Ç—å –µ—â—ë –æ–¥–Ω—É –µ—Å–ª–∏ –ø—Ä–µ–¥–∏–¥—É—â–∞—è –∑–∞–∫—Ä—ã—Ç–∞
        try:
            cursor.execute(
                f'SELECT id FROM orders WHERE id_cust = \'{custId}\' AND complit = \'0\'')
            ordersId = str(cursor.fetchone())
            print('ordersId = ' + str(ordersId))

            if ordersId == 'None':
                cursor.execute(
                    f'INSERT INTO orders (id_cust) VALUES (\'{custId}\')')
                db.commit()
            else:
                ordersId = str(ordersId)[1:-2]
                cursor.execute(
                    f'SELECT complit FROM orders WHERE id = \'{ordersId}\'')
                complitStatus = int(str(cursor.fetchone())[1:-2])

                if complitStatus == 1:
                    cursor.execute(
                        f'INSERT INTO orders (id_cust) VALUES (\'{custId}\')')
                    db.commit()
                else:
                    pass
        except Exception as e:
            db.rollback()
            print(e)

        cursor.execute(
            f'SELECT id FROM orders WHERE id_cust = \'{custId}\' AND complit = \'0\'')
        ordersId = str(cursor.fetchone())[1:-2]

        try:
            cursor.execute(
                f'INSERT INTO basket (id_orders, id_goods, amount, full_price) VALUES ({ordersId}, {flowerId}, 1, {price})')
            db.commit()
        except Exception as e:
            db.rollback()
            print(e)

        cursor.execute(
            f'SELECT amount FROM basket WHERE id_goods=\'{flowerId}\' AND id_orders = {ordersId}')
        amount = int(str(cursor.fetchone())[1:-2])

        fullPrice = amount * price

        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(*[types.InlineKeyboardButton(text=name, callback_data=name + ':' + str(flowerId))
                       for name in ['-', f'{amount} —à—Ç.', '+', '‚ùå', f'–ö –æ–ø–ª–∞—Ç–µ - {fullPrice} –≥—Ä–Ωüí∏']])
        bot.edit_message_reply_markup(cid, mid, reply_markup=keyboard)

        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—â–µ–π –æ–ø–ª–∞—Ç—ã
        try:
            cursor.execute(
                f'SELECT COUNT(*) FROM basket WHERE id_orders = {ordersId}')
            N = int(str(cursor.fetchone())[1:-2])
            print('N = ' + str(N))

            cursor.execute(
                f'SELECT full_price FROM basket WHERE id_orders = {ordersId}')

            for i in range(N):
                fullPrice = int(str(cursor.fetchone())[1:-2])
                allPrice += fullPrice

            bot.edit_message_text(
                f'üí∏–í—Å–µ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ - {allPrice}  –≥—Ä–Ωüí∏', cid, msgId)
        except Exception as e:
            print(e)

    elif re.match(r'‚ùå', call.data):
        bot.answer_callback_query(
            callback_query_id=call.id, text="–£–¥–∞–ª–µ–Ω–Ω–æ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã", show_alert=False)

        flowerId = call.data.split(':')[1]

        cursor.execute(
            f'SELECT id FROM customers WHERE chat_id = {cid}')
        custId = int(str(cursor.fetchone())[1:-2])

        cursor.execute(
            f'SELECT id FROM orders WHERE id_cust = \'{custId}\' AND complit = \'0\'')
        ordersId = str(cursor.fetchone())[1:-2]

        try:
            cursor.execute(
                f'DELETE FROM basket WHERE id_goods= {flowerId} AND id_orders = {ordersId}')
            db.commit()
            print('udaleno')
        except Exception as e:
            print(e)
            db.rollback()

        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(*[types.InlineKeyboardButton(text=name, callback_data=name + ':' + str(flowerId))
                       for name in ['‚òùÔ∏è–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—Éüëà']])
        bot.edit_message_reply_markup(cid, mid, reply_markup=keyboard)

        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—â–µ–π –æ–ø–ª–∞—Ç—ã
        try:
            cursor.execute(
                f'SELECT COUNT(*) FROM basket WHERE id_orders = {ordersId}')
            N = int(str(cursor.fetchone())[1:-2])
            print('N = ' + str(N))

            cursor.execute(
                f'SELECT full_price FROM basket WHERE id_orders = {ordersId}')

            for i in range(N):
                fullPrice = int(str(cursor.fetchone())[1:-2])
                allPrice += fullPrice

            bot.edit_message_text(
                f'üí∏–í—Å–µ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ - {allPrice}  –≥—Ä–Ωüí∏', cid, msgId)
        except Exception as e:
            print(e)

    elif re.match(r'\+', call.data):
        flowerId = call.data.split(':')[1]

        cursor.execute(
            f'SELECT id FROM customers WHERE chat_id = {cid}')
        custId = int(str(cursor.fetchone())[1:-2])

        cursor.execute(
            f'SELECT id FROM orders WHERE id_cust = \'{custId}\' AND complit = \'0\'')
        ordersId = int(str(cursor.fetchone())[1:-2])

        cursor.execute(
            f'SELECT amount FROM basket WHERE id_goods=\'{flowerId}\' AND id_orders = \'{ordersId}\'')
        amount = int(str(cursor.fetchone())[1:-2])
        # amount = int(str(cursor.fetchone())[1:-2]) + 1

        cursor.execute(
            f'SELECT amount FROM goods WHERE id=\'{flowerId}\'')
        allAmount = int(str(cursor.fetchone())[1:-2])

        if amount < allAmount:
            amount += 1

            cursor.execute(
                f'SELECT price FROM goods WHERE id=\'{flowerId}\'')
            price = int(str(cursor.fetchone())[1:-2])

            fullPrice = amount * price

            try:
                cursor.execute(
                    f'UPDATE basket SET amount = \'{amount}\', full_price = \'{fullPrice}\' WHERE id_goods = \'{flowerId}\' AND id_orders = \'{ordersId}\'')
                db.commit()
            except:
                db.rollback()

            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(*[types.InlineKeyboardButton(text=name, callback_data=name + ':' + str(flowerId))
                           for name in ['-', f'{amount} —à—Ç.', '+', '‚ùå', f'–ö –æ–ø–ª–∞—Ç–µ - {fullPrice} –≥—Ä–Ωüí∏']])
            bot.edit_message_reply_markup(cid, mid, reply_markup=keyboard)
            print('amount = ' + str(amount))

            # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—â–µ–π –æ–ø–ª–∞—Ç—ã
            try:
                cursor.execute(
                    f'SELECT COUNT(*) FROM basket WHERE id_orders = {ordersId}')
                N = int(str(cursor.fetchone())[1:-2])
                print('N = ' + str(N))

                cursor.execute(
                    f'SELECT full_price FROM basket WHERE id_orders = {ordersId}')

                for i in range(N):
                    fullPrice = int(str(cursor.fetchone())[1:-2])
                    allPrice += fullPrice

                bot.edit_message_text(
                    f'üí∏–í—Å–µ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ - {allPrice}  –≥—Ä–Ωüí∏', cid, msgId)
            except Exception as e:
                print(e)

    elif re.match(r'-', call.data):
        flowerId = call.data.split(':')[1]

        cursor.execute(
            f'SELECT id FROM customers WHERE chat_id = {cid}')
        custId = int(str(cursor.fetchone())[1:-2])

        cursor.execute(
            f'SELECT id FROM orders WHERE id_cust = \'{custId}\' AND complit = \'0\'')
        ordersId = int(str(cursor.fetchone())[1:-2])

        cursor.execute(
            f'SELECT amount FROM basket WHERE id_goods=\'{flowerId}\' AND id_orders = \'{ordersId}\'')
        amount = int(str(cursor.fetchone())[1:-2])

        cursor.execute(
            f'SELECT price FROM goods WHERE id=\'{flowerId}\'')
        price = int(str(cursor.fetchone())[1:-2])

        if amount > 1:
            amount -= 1

            fullPrice = amount * price

            try:
                cursor.execute(
                    f'UPDATE basket SET amount = \'{amount}\', full_price = \'{fullPrice}\' WHERE id_goods = \'{flowerId}\' AND id_orders = \'{ordersId}\'')
                db.commit()
            except:
                db.rollback()

            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(*[types.InlineKeyboardButton(text=name, callback_data=name + ':' + str(flowerId))
                           for name in ['-', f'{amount} —à—Ç.', '+', '‚ùå', f'–ö –æ–ø–ª–∞—Ç–µ - {fullPrice} –≥—Ä–Ωüí∏']])
            bot.edit_message_reply_markup(cid, mid, reply_markup=keyboard)
            print('amount = ' + str(amount))

            # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—â–µ–π –æ–ø–ª–∞—Ç—ã
            try:
                cursor.execute(
                    f'SELECT COUNT(*) FROM basket WHERE id_orders = {ordersId}')
                N = int(str(cursor.fetchone())[1:-2])
                print('N = ' + str(N))

                cursor.execute(
                    f'SELECT full_price FROM basket WHERE id_orders = {ordersId}')

                for i in range(N):
                    fullPrice = int(str(cursor.fetchone())[1:-2])
                    allPrice += fullPrice

                bot.edit_message_text(
                    f'üí∏–í—Å–µ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ - {allPrice}  –≥—Ä–Ωüí∏', cid, msgId)
            except Exception as e:
                print(e)

    elif re.match(r'–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—É', call.data):
        bot.clear_step_handler_by_chat_id(cid)

        flowerId = call.data.split(':')[1]
        print('flowerId = ' + str(flowerId))

        keyboard = types.ReplyKeyboardMarkup(1, row_width=2, selective=0)
        keyboard.add('–û—Ç–º–µ–Ω–∏—Ç—å‚ùå')

        msg = bot.send_message(
            cid, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É: ',  reply_markup=keyboard)
        bot.register_next_step_handler(msg, adminEditPrice, flowerId)

    elif re.match(r'–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', call.data):
        bot.clear_step_handler_by_chat_id(cid)

        flowerId = call.data.split(':')[1]
        print('flowerId = ' + str(flowerId))

        keyboard = types.ReplyKeyboardMarkup(1, row_width=2, selective=0)
        keyboard.add('–û—Ç–º–µ–Ω–∏—Ç—å‚ùå')

        msg = bot.send_message(
            cid, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ', reply_markup=keyboard)
        bot.register_next_step_handler(msg, adminEditAmount, flowerId)

    elif re.match(r'–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä', call.data):
        bot.clear_step_handler_by_chat_id(cid)

        flowerId = call.data.split(':')[1]
        print('flowerId = ' + str(flowerId))

        keyboard = types.ReplyKeyboardMarkup(1, row_width=2, selective=0)
        keyboard.add(*[types.KeyboardButton(text=admbutton)
                       for admbutton in ['–î–∞', '–ù–µ—Ç']])
        msg = bot.send_message(
            cid, '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä?', reply_markup=keyboard)
        bot.register_next_step_handler(msg, adminConfirmDel, flowerId)

    elif re.match(r'–ö –æ–ø–ª–∞—Ç–µ - ', call.data):
        phoheNumber(call.message, cart)


bot.skip_pending = True
bot.infinity_polling(True)
